/**
 * myADTTestDriver.cpp
 * 
 * Description: Unit tests for MyADT class methods.
 * 
 * Author: Jake Choi
 */

#include <iostream>
#include "MyADT.h"
#include "Profile.h"

using std::cout;
using std::endl;

bool testGetElementCount(MyADT &adt, unsigned int expected) {
    return adt.getElementCount() == expected;
}

// Description: Tests the insert() method of MyADT including checking for duplicates
bool testInsert(MyADT &adt, Profile &profile) {
    if (adt.insert(profile)) {
        // Successfully inserted, now check for duplicates
        if (adt.insert(profile)) {
            // Inserting a duplicate should fail
            std::cout << "FAILED: Duplicate profile insertion" << std::endl;
            return false;
        }
        std::cout << "PASSED: Insertion of profile" << std::endl;
        return true;
    }
    std::cout << "FAILED: Insertion failed" << std::endl;
    return false;
}

bool testSearch(MyADT &adt, Profile &profile) {
    return adt.search(profile) != nullptr;
}

bool testRemove(MyADT &adt, Profile &profile) {
    return adt.remove(profile);
}

bool testRemoveAll(MyADT &adt) {
    adt.removeAll();
    return adt.getElementCount() == 0;
}

bool testCopyConstructor(MyADT &adt, Profile profiles[], int arrSize) {
    MyADT destAdt = adt; // Copy constructor
    
    // Sanity check
    destAdt.print();
    
    for (int i = 0; i < arrSize; i++) { 
        if (destAdt.search(profiles[i]) == nullptr) {
            return false;
        }
    }

    return true;
}

int main() {
    // Initialize a new ADT
    MyADT *myAdt = new MyADT();

    // Check if initialization was successful
    if (myAdt == nullptr) {
        cout << "Failed to initialize MyADT" << endl;
        return -1;
    }

    // Test getElementCount: Should return 0
    cout << "Testing get element count (Expected: 0)" << endl;
    if (testGetElementCount(*myAdt, 0)) {
        cout << "PASSED" << endl;
    } else {
        cout << "FAILED" << endl;
    }

    // Set up an array of profiles for insertion, searching, and removal tests
    const int numProfiles = 6;
    Profile profilesToTest[numProfiles] = {
        Profile("Aang"), Profile("Bob"), Profile("Zuck"), Profile("Anna"), 
        Profile("Bill"), Profile("Benny")
    };

    // Test insertion and find inserted elements
    cout << "Testing insertion" << endl;
    for (int i = 0; i < numProfiles; i++) {
        if (testInsert(*myAdt, profilesToTest[i])) {
            cout << "PASSED " << i + 1 << endl;
        } else {
            cout << "FAILED " << i + 1 << endl;
        }
    }

    // Test searching for elements just inserted
    cout << "Testing search" << endl;
    for (int i = 0; i < numProfiles; i++) {
        if (testSearch(*myAdt, profilesToTest[i])) {
            cout << "PASSED " << i + 1 << endl;
        } else {
            cout << "FAILED " << i + 1 << endl;
        }
    }

    // Check element count again: Should be 6
    cout << "Testing get element count (Expected: 6)" << endl;
    if (testGetElementCount(*myAdt, numProfiles)) {
        cout << "PASSED" << endl;
    } else {
        cout << "FAILED" << endl;
    }

    // Test Print for sanity check
    myAdt->print();

    // Test removal of a profile
    cout << "Testing removal" << endl;
    for (int i = 0; i < 2; i++) {
        if (testRemove(*myAdt, profilesToTest[i])) {
            cout << "PASSED " << i + 1 << endl;
        } else {
            cout << "FAILED " << i + 1 << endl;
        }
    }

    // Test Remove all
    cout << "Testing remove all" << endl;
    if (testRemoveAll(*myAdt)) {
        cout << "PASSED" << endl;
    } else {
        cout << "FAILED" << endl;
    }

    // Print for sanity check
    myAdt->print(); // nothing should be displayed in stdout

    // Test Insert on full and remove non-existent profile
    const int numProfiles2 = 6;
    Profile profilesToTest2[numProfiles2] = {
        Profile("Anna"), Profile("Alicia"), Profile("Abba"), Profile("Abbey"),
        Profile("Aang"), Profile("Axel")
    };
    
    cout << "Testing insertion for when full" << endl;
    for (int i = 0; i < numProfiles2 - 1; i++) {
        if (testInsert(*myAdt, profilesToTest2[i])) {
            cout << "PASSED " << i + 1 << endl;
        } else {
            cout << "FAILED " << i + 1 << endl;
        }
    } // should fail to insert for when full
    if (!testInsert(*myAdt, profilesToTest2[numProfiles2 - 1])) {
        cout << "PASSED " << numProfiles2 << endl;
    } else {
        cout << "FAILED " << numProfiles2 << endl;
    }
    // should fail to remove
    cout << "Testing removal of non-existent profile" << endl;
    if (!testRemove(*myAdt, profilesToTest2[numProfiles2 - 1])) {
        cout << "PASSED" << endl;
    } else {
        cout << "FAILED" << endl;
    }

    // Sanity check
    myAdt->print();

    // Check element count again: Should be 5
    cout << "Testing get element count (Expected: 5)" << endl;
    if (testGetElementCount(*myAdt, numProfiles2 - 1)) {
        cout << "PASSED" << endl;
    } else {
        cout << "FAILED" << endl;
    }

    // Test copy constructor
    cout << "Testing copy constructor" << endl;
    if (testCopyConstructor(*myAdt, profilesToTest2, 5)) {
        cout << "PASSED" << endl;
    } else {
        cout << "FAILED" << endl;
    }

    // Test remove all using remove()
    cout << "Testing remove all with single remove" << endl;
    for (int i = 0; i < numProfiles2 - 1; i++) {
        if (testRemove(*myAdt, profilesToTest2[i])) {
            cout << "PASSED " << i + 1 << endl;
        } else {
            cout << "FAILED " << i + 1 << endl;
        }
    }

    // Check element count again: Should be 0
    cout << "Testing get element count (Expected: 0)" << endl;
    if (testGetElementCount(*myAdt, 0)) {
        cout << "PASSED" << endl;
    } else {
        cout << "FAILED" << endl;
    }

    // should print nothing
    myAdt->print();

    // Delete myAdt
    delete myAdt;

    return 0;
}